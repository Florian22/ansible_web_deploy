---
- name: Update apt packages
  become: true
  apt:
    upgrade: yes

- name: Install openvpn & dependencies
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - openvpn
    - openssl
    #- easy-rsa

#https://docs.ansible.com/ansible/latest/modules/get_url_module.html?highlight=get_url 
- name: "Download easy-rsa from {{ EASY_RSA_Link }}"
  become: yes
  get_url: 
    dest: /home/{{ user }}/easy-rsa.tgz
    force: yes
    url: "{{ EASY_RSA_Link }}"

- name: "Set permissions"
  become: yes
  file:
    path: /home/{{ user }}/easy-rsa.tgz
    owner: "{{ user }}"

#######

# https://docs.ansible.com/ansible/latest/modules/unarchive_module.html
- name: Extract easy-rsa for open vpn server
  become: yes
  unarchive:
    remote_src: yes
    src: /home/{{ user }}/easy-rsa.tgz
    dest: /home/{{ user }}/

#- name: Extract easy-rsa for CA Authority
#  copy:
#    remote_src: yes
#    src: "{{ EASYRSA_TOP_TREE}}"
#    dest: "{{ EASYRSA_CA_TOP_TREE }}"

- name: Remove easy-rsa archive
  become: yes
  file:
    path: /home/{{ user }}/easy-rsa.tgz
    state: absent


##Use later for signning
#- name: Create easy-rsa var file
#  become: yes
#  template:
#    src: templates/vars.j2
#    dest: "{{ EASYRSA_TOP_TREE}}/vars"
#    force: yes

#- name: "Initiate the public key infrastructure on the CA server for singing"
#  become: yes
#  shell: >
#    ./easyrsa --batch init-pki;
#  args: 
#    chdir: "{{ EASYRSA_TOP_TREE }}"
#    executable: /bin/bash

#- name: "Generate CA public & private keys"
#  become: yes
#  shell: >
#    ./easyrsa --batch build-ca nopass;
#  args: 
#    chdir: "{{ EASYRSA_TOP_TREE }}"
#    executable: /bin/bash
##End signing part

- name: "Generate private keys for openVPN server and certificate request .req"
  become: yes
  shell: >
    ./easyrsa --batch init-pki;
    ./easyrsa --batch gen-req {{ EASYRSA_REQ_NAME }} nopass;
  args: 
    chdir: "{{ EASYRSA_TOP_TREE }}"
    executable: /bin/bash

- name: "Copy keys to /etc/openvpn server"
  become: yes
  copy:
    remote_src: yes
    src: "{{ EASYRSA_TOP_TREE }}/pki/private/{{ item }}"
    dest: "/etc/openvpn/"
  with_items:
    - "{{ EASYRSA_REQ_NAME }}.key"

    
- name: "Fetch server.req to tmp of CA authority"
  become: yes
  fetch:
    src: "{{ EASYRSA_TOP_TREE }}/pki/{{ item }}"
    dest: "/tmp/"
  with_items:
    - "reqs/{{ EASYRSA_REQ_NAME }}.req"

#- name: "Remove duplicate file"
#  become: yes
#  file:
#    path: "{{ EASYRSA_TOP_TREE }}/pki/{{ item }}"
#    state: absent
#  with_items:
#    - "reqs/{{ EASYRSA_REQ_NAME }}.req"

#FBO
#Next, on your CA machine, navigate to the EasyRSA directory:
######################
#Execute on local machine
#- name: "Sign cert"
#  become: yes
#  local_action:
#    shell: >
#      ./easyrsa --batch import-req /tmp/{{ EASYRSA_REQ_NAME }}.req {{ EASYRSA_REQ_NAME }};
#      ./easyrsa  --batch sign-req {{ EASYRSA_REQ_NAME }} {{ EASYRSA_REQ_NAME }};
#    args: 
#      chdir: "{{ EASYRSA_CA_TOP_TREE }}"
#      executable: /bin/bash
################End exec local


- name: "Copy crt server openvpn"
  become: yes
  copy:
    #remote_src: yes
    src: "{{ EASYRSA_CA_TOP_TREE }}/pki/{{ item }}"
    dest: "/etc/openvpn"
  with_items:
    - "issued/{{ EASYRSA_REQ_NAME }}.crt"
    - "ca.crt"

#- name: "Copy ca server openvpn"
#  become: yes
#  copy:
#    remote_src: yes
#    src: "{{ EASYRSA_TOP_TREE }}/pki/{{ item }}"
#    dest: "/etc/openvpn/"
#  with_items:
#    - "ca.crt"
  
- name: "Create a strong Diffie-Hellman key to use during key exchange & TLS"
  become: yes
  shell: >
    ./easyrsa gen-dh;
    openvpn --genkey --secret ta.key;
  args: 
    chdir: "{{ EASYRSA_TOP_TREE }}"
    executable: /bin/bash

- name: "Copy ta.key & dh.pem to openvpn"
  become: yes
  copy:
    remote_src: yes
    src: "{{ EASYRSA_TOP_TREE }}/{{ item }}"
    dest: "/etc/openvpn/"
  with_items:
    - "ta.key"
    - "pki/dh.pem"

#Step 4 Generate client keys

- name: "Create client config directory"
  become: yes
  file:
    state: directory
    path: "/home/{{ user }}/client-configs/keys"
    mode: 0700

- name: "Generate client keys and certificate request .req"
  become: yes
  shell: >
    ./easyrsa --batch gen-req client1 nopass
  args: 
    chdir: "{{ EASYRSA_TOP_TREE }}"
    executable: /bin/bash

- name: "Copy key to client folder"
  become: yes
  copy:
    remote_src: yes
    src: "{{ EASYRSA_TOP_TREE }}/pki/private/{{ item }}"
    dest: "/home/{{ user }}/client-configs/keys"
  with_items:
    - "client1.key"

- name: "Fetch server.req to tmp of CA authority"
  become: yes
  fetch:
#    remote_src: yes
    src: "{{ EASYRSA_TOP_TREE }}/pki/{{ item }}"
    dest: "/tmp/"
  with_items:
    - "reqs/client1.req"

#Execute on local machine
- name: "Sign cert"
  become: yes
  local_action:
    shell: >
      ./easyrsa --batch import-req /tmp/client1.req client1;
      ./easyrsa  --batch sign-req client client1;
    args: 
      chdir: "{{ EASYRSA_CA_TOP_TREE }}"
      executable: /bin/bash
################End exec local

- name: "Copy crt server openvpn"
  become: yes
  copy:
    remote_src: yes
    src: "{{ EASYRSA_CA_TOP_TREE }}/pki/{{ item }}"
    dest: "/home/{{ user }}/client-configs/keys/"
  with_items:
    - "issued/client1.crt"

#Copy client signed cert in keys folder
#- name: "Copy signed key to client folder"
#  become: yes
#  copy:
#    remote_src: yes
#    src: "{{ EASYRSA_TOP_TREE }}/pki/issued/{{ item }}"
#    dest: "/home/{{ user }}/client-configs/keys"
#  with_items:
#    - "client1.crt"

- name: "Copy ta.key to client folder"
  become: yes
  copy:
    remote_src: yes
    src: "{{ EASYRSA_TOP_TREE }}/{{ item }}"
    dest: "/home/{{ user }}/client-configs/keys"
  with_items:
    - "ta.key"

- name: "Copy ca.crt to client folder"
  become: yes
  copy:
    remote_src: yes
    src: "/etc/openvpn/{{ item }}"
    dest: "/home/{{ user }}/client-configs/keys"
  with_items:
    - "ca.crt"

#- name: "Generate server.conf from sample config"
#  become: yes
#  unarchive:
#    src: /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz 
#    dest: /etc/openvpn/{{ EASYRSA_REQ_NAME }}.conf
# Step 5 â€” Configuring the OpenVPN Service

- name: "Generate server.conf from sample config"
  become: yes
  shell: >
     gzip -d -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/{{ EASYRSA_REQ_NAME }}.conf > /dev/null

#Check if not working 12:32
#Can use template
- name: Adjust OpenVPN server configuration
  become: yes
  template:
    src: templates/server.conf.j2
    dest: /etc/openvpn/{{ EASYRSA_REQ_NAME }}.conf
    force: yes
  
  #lineinfile:
  ##  dest: "/etc/openvpn/{{ EASYRSA_REQ_NAME }}.conf"
  ##  regexp: "^{{ item.regex | regex_escape() }}"
  #  line: "{{ item.value }}"
  #with_items:
  #  - { regex: ';user nobody', value: 'user nobody' }
  #  - { regex: ';group nogroup', value: 'group nogroup' }
  #  - { regex: ';push "redirect-gateway def1 bypass-dhcp"', value: 'push "redirect-gateway def1 bypass-dhcp"' }
  #  - { regex: 'cert server.crt', value: 'cert {{ EASYRSA_REQ_NAME }}.crt' }
  #  - { regex: 'key server.key', value: 'key {{ EASYRSA_REQ_NAME }}.key' }
  #  - { regex: 'cipher AES-256-CBC', value: 'cipher AES-128-CBC' }
  #  - { regex: ';push "dhcp-option DNS 208.67.222.222"', value: 'push "dhcp-option DNS 208.67.222.222"' }
  #  - { regex: ';push "dhcp-option DNS 208.67.220.220"', value: 'push "dhcp-option DNS 208.67.220.220"' }

#14:09
- name: Configuration IP forwarding
  become: true
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Start openvpn systemd service
  become: true
  systemd:
    name: openvpn@{{ EASYRSA_REQ_NAME }}
    state: started
    daemon_reload: yes
    enabled: yes

#Create client config folder
- name: Create client configuration folder
  file:
    state: directory
    mode: 0700
    path: "/home/{{ user }}/client-configs/files"

#- name: Create client configuration
#  become: yes
#  copy:
#    remote_src: yes
#    src: "/usr/share/doc/openvpn/examples/sample-config-files/client.conf"
#    dest: "/home/{{ user }}/client-configs/sample.conf"

- name: Adjust OpenVPN client configuration
  become: yes
  template:
    src: templates/client.conf.j2
    dest: /etc/openvpn/sample.conf
    force: yes

- name: "Create client ovpn file"
  become: yes
  shell: "{{ item }}"
  with_items:
    - cat /etc/openvpn/sample.conf >> /home/{{ user }}/client-configs/files/client1.ovpn
    - echo -e '<ca>' >> /home/{{ user }}/client-configs/files/client1.ovpn
    - cat {{ EASYRSA_TOP_TREE }}/keys/ca.crt >> /home/{{ user }}/client-configs/files/client1.ovpn
    - echo -e '</ca>\n<cert>' >> /home/{{ user }}/client-configs/files/client1.ovpn
    - cat {{ EASYRSA_TOP_TREE }}/keys/client1.crt >> /home/{{ user }}/client-configs/files/client1.ovpn
    - echo -e '</cert>\n<key>' >> /home/{{ user }}/client-configs/files/client1.ovpn
    - cat {{ EASYRSA_TOP_TREE }}/keys/client1.key >> /home/{{ user }}/client-configs/files/client1.ovpn
    - echo -e '</key>\n<tls-auth>' >> /home/{{ user }}/client-configs/files/client1.ovpn
    - cat {{ EASYRSA_TOP_TREE }}/keys/ta.key >> /home/{{ user }}/client-configs/files/client1.ovpn
    - echo -e '</tls-auth>' >> /home/{{ user }}/client-configs/files/client1.ovpn
   # - echo -e 'key-direction 1' >> /home/{{ user }}/client-configs/files/client1.ovpn
  args:
    chdir: "/home/{{ user }}/client-configs/files/"
    executable: /bin/bash

#Start openvpn servce
#- name: Start openvpn service
#  become: true
#  service:
#    name: openvpn
#    state: started
#    enabled: yes
...

